"use strict";(self.webpackChunkmain=self.webpackChunkmain||[]).push([[8821],{8821:function(n,r,e){e.r(r);e(72791);var t=e(78983),l=e(47225),a=e(80184),i="javascript";r.default=function(){return(0,a.jsxs)(t.rb,{children:[(0,a.jsx)(t.b7,{xs:12,children:(0,a.jsxs)(t.xH,{className:"mb-4",children:[(0,a.jsx)(t.bn,{children:(0,a.jsx)("strong",{children:"Convert to full-with"})}),(0,a.jsx)(t.sl,{children:(0,a.jsx)(l.Z1,{text:' // convert to full with\n  protected String convToFullWith(String val,int size){\n    //\u6587\u5b57\u30bb\u30c3\u30c8\n    if(!isNullOrNullVal(val)) {\n        val = execFuncString(createSqlId(LOGIC_ID, "MSFA_CHANGE_OUTPUT_VALUE", "A01"),MSFA_CHANGE_OUTPUT_VALUE(value(val)));\n        if(val.length() > size) {\n            val = val.substring(0, size);\n        }\n        Charset _charset = StandardCharsets.UTF_8;\n        StringBuilder builder = new StringBuilder();\n        for(int i = 0; i< val.length(); i++ ) {\n            String chk = val.substring(i, i+1);\n            if (isSame(chk.length(),_charset.encode(chk).array().length)) {\n                for (char c : chk.toCharArray()) {\n                    builder.append((char) (c + 65248));\n                }\n            }else {\n                builder.append(chk);\n            }\t\n        }\n        return builder.toString();\n    }\n    return val;\n  }\n',language:i,showLineNumbers:!0,theme:l.cL,codeBlock:!0})})]})}),(0,a.jsx)(t.b7,{xs:12,children:(0,a.jsxs)(t.xH,{className:"mb-4",children:[(0,a.jsx)(t.bn,{children:(0,a.jsx)("strong",{children:"Remove over byte"})}),(0,a.jsx)(t.sl,{children:(0,a.jsx)(l.Z1,{text:'/*\n  * \u7279\u5927\u306e\u6587\u5b57\u3092\u524a\u9664\u3057\u307e\u3059\n  * val\uff1a \u30a2\u30a4\u30c6\u30e0\u5024\n  * bte: \u5236\u9650\u306ebyte\n  */\n  protected String rmOverByte(String val,int bte){\n      //\u6587\u5b57\u30bb\u30c3\u30c8\n      Charset _charset = StandardCharsets.UTF_8;\n      if(!isNullOrNullVal(val)) {\n          int valLength = _charset.encode(val).array().length;\n          if(valLength > bte) {\n              int cntByte = 0;\n              String rslt = "";\n              for(int i = 0 ; i < val.length(); i++) {\n                  String chk = val.substring(i, i+1);\n                  int numchk = _charset.encode(chk).array().length;\n                  cntByte += numchk;\n                  if(cntByte <= bte) {\n                      rslt += chk;\n                  }else {\n                      break;\n                  }\n              }\n              return rslt;\n          }\n      }\n      return val;\n  }\n',language:i,showLineNumbers:!0,theme:l.cL,codeBlock:!0})})]})}),(0,a.jsx)(t.b7,{xs:12,children:(0,a.jsxs)(t.xH,{className:"mb-4",children:[(0,a.jsx)(t.bn,{children:(0,a.jsx)("strong",{children:"Remove Charater"})}),(0,a.jsx)(t.sl,{children:(0,a.jsx)(l.Z1,{text:"/*\n *\u6587\u5b57\u5217\u306e\u524a\u9664\n * val\uff1a \u30a2\u30a4\u30c6\u30e0\u5024\n * endChar\uff1a \u6700\u5f8c\u306e\u5e0c\u671b\u306e\u4f4d\u7f6e\n * numChar\uff1a \u53d7\u4fe1\u3057\u305f\u3044\u6587\u5b57\u306e\u6570\n * rmChar0\uff1a \u6587\u5b57\u5217\u306e\u4e0a\u90e8\u306b\u6587\u5b57[0]\u3092\u6d88\u53bb\u3059\u308b\u30d5\u30e9\u30b0\n */\n  protected String rmChar(String val,int numChar,int endChar,boolean rmChar0){\n    if(!isNullOrNullVal(val)){\n        int split = val.length() - numChar;\n        if(split < 0) {\n            return val;\n        }\n        val = val.substring(split, endChar);\n        if(rmChar0){\n            char chk0 = '0';\n            while (isSame(val.charAt(0),chk0)){\n                    val = val.substring(1, val.length());\n            }\n        }\n    }\n    return val;\n  }\n",language:i,showLineNumbers:!0,theme:l.cL,codeBlock:!0})})]})}),(0,a.jsx)(t.b7,{xs:12,children:(0,a.jsxs)(t.xH,{className:"mb-4",children:[(0,a.jsx)(t.bn,{children:(0,a.jsx)("strong",{children:"Remove Number"})}),(0,a.jsx)(t.sl,{children:(0,a.jsx)(l.Z1,{text:'/*\n *\u756a\u53f7\u3092\u524a\u9664\u3057\u307e\u3059\n * val\uff1a \u30a2\u30a4\u30c6\u30e0\u5024\n * numLeft\uff1a  \u53d7\u4fe1\u3057\u305f\u3044\u306e\u6574\u6570\n * numRight\uff1a \u53d7\u4fe1\u3057\u305f\u3044\u306e\u5c0f\u6570\n */\n  protected MCNumber rmNum(MCNumber val,int numLeft,int numRight){\n    String valStr = String.valueOf(val);\n    if(!isNullOrNullVal(valStr)) {\n        if(valStr.contains(".")){\n            String[] arr = valStr.split(".", 2);\n            if(arr[0].length() > numLeft) {\n                arr[0] = rmChar(arr[0],numLeft,arr[0].length(),true);\n            }\n            if(arr[1].length() > numRight) {\n                arr[1] = rmChar(arr[1],arr[1].length(),numRight,false);\n            }\n            val = MCNumber.valueOf(arr[0]+"."+arr[1]);\n        }else {\n            val = MCNumber.valueOf(rmChar(valStr,numLeft,valStr.length(),true));\n        }\n    }\n    return val;\n  }\n',language:i,showLineNumbers:!0,theme:l.cL,codeBlock:!0})})]})})]})}}}]);
//# sourceMappingURL=8821.8881f803.chunk.js.map